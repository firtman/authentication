{"pageProps":{"post":{"attributes":{},"html":"<h1 id=\"setting-up-endpoints-for-webauthn\">Setting Up endpoints for WebAuthn</h1>\n<p>Now, the largest part: implementing WebAuthn in our server</p>\n<h2 id=\"registration-endpoints\">Registration endpoints</h2>\n<pre><code class=\"hljs language-js\">app.<span class=\"hljs-title function_\">post</span>(<span class=\"hljs-string\">&quot;/auth/webauth-registration-options&quot;</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">req, res</span>) =&gt;</span>{\n    <span class=\"hljs-keyword\">const</span> user = <span class=\"hljs-title function_\">findUser</span>(req.<span class=\"hljs-property\">body</span>.<span class=\"hljs-property\">email</span>);\n\n    <span class=\"hljs-keyword\">const</span> options = {\n        <span class=\"hljs-attr\">rpName</span>: <span class=\"hljs-string\">&#x27;Coffee Masters&#x27;</span>,\n        rpID,\n        <span class=\"hljs-attr\">userID</span>: user.<span class=\"hljs-property\">email</span>,\n        <span class=\"hljs-attr\">userName</span>: user.<span class=\"hljs-property\">name</span>,\n        <span class=\"hljs-attr\">timeout</span>: <span class=\"hljs-number\">60000</span>,\n        <span class=\"hljs-attr\">attestationType</span>: <span class=\"hljs-string\">&#x27;none&#x27;</span>,\n        \n        <span class=\"hljs-comment\">/**\n         * Passing in a user&#x27;s list of already-registered authenticator IDs here prevents users from\n         * registering the same device multiple times. The authenticator will simply throw an error in\n         * the browser if it&#x27;s asked to perform registration when one of these ID&#x27;s already resides\n         * on it.\n         */</span>\n        <span class=\"hljs-attr\">excludeCredentials</span>: user.<span class=\"hljs-property\">devices</span> ? user.<span class=\"hljs-property\">devices</span>.<span class=\"hljs-title function_\">map</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">dev</span> =&gt;</span> ({\n            <span class=\"hljs-attr\">id</span>: dev.<span class=\"hljs-property\">credentialID</span>,\n            <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&#x27;public-key&#x27;</span>,\n            <span class=\"hljs-attr\">transports</span>: dev.<span class=\"hljs-property\">transports</span>,\n        })) : [],\n\n        <span class=\"hljs-attr\">authenticatorSelection</span>: {\n            <span class=\"hljs-attr\">userVerification</span>: <span class=\"hljs-string\">&#x27;required&#x27;</span>, \n            <span class=\"hljs-attr\">residentKey</span>: <span class=\"hljs-string\">&#x27;required&#x27;</span>,\n        },\n        <span class=\"hljs-comment\">/**\n         * The two most common algorithms: ES256, and RS256\n         */</span>\n        <span class=\"hljs-attr\">supportedAlgorithmIDs</span>: [-<span class=\"hljs-number\">7</span>, -<span class=\"hljs-number\">257</span>],\n    };\n\n    <span class=\"hljs-comment\">/**\n     * The server needs to temporarily remember this value for verification, so don&#x27;t lose it until\n     * after you verify an authenticator response.\n     */</span>\n    <span class=\"hljs-keyword\">const</span> regOptions = <span class=\"hljs-title class_\">SimpleWebAuthnServer</span>.<span class=\"hljs-title function_\">generateRegistrationOptions</span>(options)\n    user.<span class=\"hljs-property\">currentChallenge</span> = regOptions.<span class=\"hljs-property\">challenge</span>;\n    db.<span class=\"hljs-title function_\">write</span>();\n    \n    res.<span class=\"hljs-title function_\">send</span>(regOptions);\n});\n\napp.<span class=\"hljs-title function_\">post</span>(<span class=\"hljs-string\">&quot;/auth/webauth-registration-verification&quot;</span>, <span class=\"hljs-keyword\">async</span> (req, res) =&gt; {\n    <span class=\"hljs-keyword\">const</span> user = <span class=\"hljs-title function_\">findUser</span>(req.<span class=\"hljs-property\">body</span>.<span class=\"hljs-property\">user</span>.<span class=\"hljs-property\">email</span>);\n    <span class=\"hljs-keyword\">const</span> data = req.<span class=\"hljs-property\">body</span>.<span class=\"hljs-property\">data</span>;\n  \n    <span class=\"hljs-keyword\">const</span> expectedChallenge = user.<span class=\"hljs-property\">currentChallenge</span>;\n  \n    <span class=\"hljs-keyword\">let</span> verification;\n    <span class=\"hljs-keyword\">try</span> {\n      <span class=\"hljs-keyword\">const</span> options = {\n        <span class=\"hljs-attr\">credential</span>: data,\n        <span class=\"hljs-attr\">expectedChallenge</span>: <span class=\"hljs-string\">`<span class=\"hljs-subst\">${expectedChallenge}</span>`</span>,\n        expectedOrigin,\n        <span class=\"hljs-attr\">expectedRPID</span>: rpID,\n        <span class=\"hljs-attr\">requireUserVerification</span>: <span class=\"hljs-literal\">true</span>,\n      };\n      verification = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title class_\">SimpleWebAuthnServer</span>.<span class=\"hljs-title function_\">verifyRegistrationResponse</span>(options);\n    } <span class=\"hljs-keyword\">catch</span> (error) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(error);\n      <span class=\"hljs-keyword\">return</span> res.<span class=\"hljs-title function_\">status</span>(<span class=\"hljs-number\">400</span>).<span class=\"hljs-title function_\">send</span>({ <span class=\"hljs-attr\">error</span>: error.<span class=\"hljs-title function_\">toString</span>() });\n    }\n  \n    <span class=\"hljs-keyword\">const</span> { verified, registrationInfo } = verification;\n  \n    <span class=\"hljs-keyword\">if</span> (verified &amp;&amp; registrationInfo) {\n      <span class=\"hljs-keyword\">const</span> { credentialPublicKey, credentialID, counter } = registrationInfo;\n  \n      <span class=\"hljs-keyword\">const</span> existingDevice = user.<span class=\"hljs-property\">devices</span> ? user.<span class=\"hljs-property\">devices</span>.<span class=\"hljs-title function_\">find</span>(\n        <span class=\"hljs-function\"><span class=\"hljs-params\">device</span> =&gt;</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Buffer</span>(device.<span class=\"hljs-property\">credentialID</span>.<span class=\"hljs-property\">data</span>).<span class=\"hljs-title function_\">equals</span>(credentialID)\n      ) : <span class=\"hljs-literal\">false</span>;\n  \n      <span class=\"hljs-keyword\">if</span> (!existingDevice) {\n        <span class=\"hljs-keyword\">const</span> newDevice = {\n          credentialPublicKey,\n          credentialID,\n          counter,\n          <span class=\"hljs-attr\">transports</span>: data.<span class=\"hljs-property\">transports</span>,\n        };\n        <span class=\"hljs-keyword\">if</span> (user.<span class=\"hljs-property\">devices</span>==<span class=\"hljs-literal\">undefined</span>) {\n            user.<span class=\"hljs-property\">devices</span> = [];\n        }\n        user.<span class=\"hljs-property\">webauthn</span> = <span class=\"hljs-literal\">true</span>;\n        user.<span class=\"hljs-property\">devices</span>.<span class=\"hljs-title function_\">push</span>(newDevice);\n        db.<span class=\"hljs-title function_\">write</span>();\n      }\n    }\n  \n    res.<span class=\"hljs-title function_\">send</span>({ <span class=\"hljs-attr\">ok</span>: <span class=\"hljs-literal\">true</span> });\n\n});\n</code></pre>\n<h2 id=\"loginauthentication-endpoints\">Login/Authentication Endpoints</h2>\n<pre><code class=\"hljs language-js\">\n\napp.<span class=\"hljs-title function_\">post</span>(<span class=\"hljs-string\">&quot;/auth/webauth-login-options&quot;</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">req, res</span>) =&gt;</span>{\n    <span class=\"hljs-keyword\">const</span> user = <span class=\"hljs-title function_\">findUser</span>(req.<span class=\"hljs-property\">body</span>.<span class=\"hljs-property\">email</span>);\n    <span class=\"hljs-comment\">// if (user==null) {</span>\n    <span class=\"hljs-comment\">//     res.sendStatus(404);</span>\n    <span class=\"hljs-comment\">//     return;</span>\n    <span class=\"hljs-comment\">// }</span>\n    <span class=\"hljs-keyword\">const</span> options = {\n        <span class=\"hljs-attr\">timeout</span>: <span class=\"hljs-number\">60000</span>,\n        <span class=\"hljs-attr\">allowCredentials</span>: [],\n        <span class=\"hljs-attr\">devices</span>: user &amp;&amp; user.<span class=\"hljs-property\">devices</span> ? user.<span class=\"hljs-property\">devices</span>.<span class=\"hljs-title function_\">map</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">dev</span> =&gt;</span> ({\n          <span class=\"hljs-attr\">id</span>: dev.<span class=\"hljs-property\">credentialID</span>,\n          <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&#x27;public-key&#x27;</span>,\n          <span class=\"hljs-attr\">transports</span>: dev.<span class=\"hljs-property\">transports</span>,\n        })) : [],\n        <span class=\"hljs-attr\">userVerification</span>: <span class=\"hljs-string\">&#x27;required&#x27;</span>,\n        rpID,\n    };\n    <span class=\"hljs-keyword\">const</span> loginOpts = <span class=\"hljs-title class_\">SimpleWebAuthnServer</span>.<span class=\"hljs-title function_\">generateAuthenticationOptions</span>(options);\n    <span class=\"hljs-keyword\">if</span> (user) user.<span class=\"hljs-property\">currentChallenge</span> = loginOpts.<span class=\"hljs-property\">challenge</span>;\n    res.<span class=\"hljs-title function_\">send</span>(loginOpts);\n});\n\napp.<span class=\"hljs-title function_\">post</span>(<span class=\"hljs-string\">&quot;/auth/webauth-login-verification&quot;</span>, <span class=\"hljs-keyword\">async</span> (req, res) =&gt; {\n    <span class=\"hljs-keyword\">const</span> data = req.<span class=\"hljs-property\">body</span>.<span class=\"hljs-property\">data</span>;\n    <span class=\"hljs-keyword\">const</span> user = <span class=\"hljs-title function_\">findUser</span>(req.<span class=\"hljs-property\">body</span>.<span class=\"hljs-property\">email</span>);\n    <span class=\"hljs-keyword\">if</span> (user==<span class=\"hljs-literal\">null</span>) {\n        res.<span class=\"hljs-title function_\">sendStatus</span>(<span class=\"hljs-number\">400</span>).<span class=\"hljs-title function_\">send</span>({<span class=\"hljs-attr\">ok</span>: <span class=\"hljs-literal\">false</span>});\n        <span class=\"hljs-keyword\">return</span>;\n    } \n  \n    <span class=\"hljs-keyword\">const</span> expectedChallenge = user.<span class=\"hljs-property\">currentChallenge</span>;\n  \n    <span class=\"hljs-keyword\">let</span> dbAuthenticator;\n    <span class=\"hljs-keyword\">const</span> bodyCredIDBuffer = base64url.<span class=\"hljs-title function_\">toBuffer</span>(data.<span class=\"hljs-property\">rawId</span>);\n\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> dev <span class=\"hljs-keyword\">of</span> user.<span class=\"hljs-property\">devices</span>) {\n      <span class=\"hljs-keyword\">const</span> currentCredential = <span class=\"hljs-title class_\">Buffer</span>(dev.<span class=\"hljs-property\">credentialID</span>.<span class=\"hljs-property\">data</span>);\n      <span class=\"hljs-keyword\">if</span> (bodyCredIDBuffer.<span class=\"hljs-title function_\">equals</span>(currentCredential)) {\n        dbAuthenticator = dev;\n        <span class=\"hljs-keyword\">break</span>;\n      }\n    }\n\n    <span class=\"hljs-keyword\">if</span> (!dbAuthenticator) {\n      <span class=\"hljs-keyword\">return</span> res.<span class=\"hljs-title function_\">status</span>(<span class=\"hljs-number\">400</span>).<span class=\"hljs-title function_\">send</span>({ <span class=\"hljs-attr\">ok</span>: <span class=\"hljs-literal\">false</span>, <span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">&#x27;Authenticator is not registered with this site&#x27;</span> });\n    }\n  \n    <span class=\"hljs-keyword\">let</span> verification;\n    <span class=\"hljs-keyword\">try</span> {\n      <span class=\"hljs-keyword\">const</span> options  = {\n        <span class=\"hljs-attr\">credential</span>: data,\n        <span class=\"hljs-attr\">expectedChallenge</span>: <span class=\"hljs-string\">`<span class=\"hljs-subst\">${expectedChallenge}</span>`</span>,\n        expectedOrigin,\n        <span class=\"hljs-attr\">expectedRPID</span>: rpID,\n        <span class=\"hljs-attr\">authenticator</span>: {\n            ...dbAuthenticator,\n            <span class=\"hljs-attr\">credentialPublicKey</span>: <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Buffer</span>(dbAuthenticator.<span class=\"hljs-property\">credentialPublicKey</span>.<span class=\"hljs-property\">data</span>) <span class=\"hljs-comment\">// Re-convert to Buffer from JSON</span>\n        },\n        <span class=\"hljs-attr\">requireUserVerification</span>: <span class=\"hljs-literal\">true</span>,\n      };\n      verification = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title class_\">SimpleWebAuthnServer</span>.<span class=\"hljs-title function_\">verifyAuthenticationResponse</span>(options);\n    } <span class=\"hljs-keyword\">catch</span> (error) {\n      <span class=\"hljs-keyword\">return</span> res.<span class=\"hljs-title function_\">status</span>(<span class=\"hljs-number\">400</span>).<span class=\"hljs-title function_\">send</span>({ <span class=\"hljs-attr\">ok</span>: <span class=\"hljs-literal\">false</span>, <span class=\"hljs-attr\">message</span>: error.<span class=\"hljs-title function_\">toString</span>() });\n    }\n  \n    <span class=\"hljs-keyword\">const</span> { verified, authenticationInfo } = verification;\n  \n    <span class=\"hljs-keyword\">if</span> (verified) {\n      dbAuthenticator.<span class=\"hljs-property\">counter</span> = authenticationInfo.<span class=\"hljs-property\">newCounter</span>;\n    }\n  \n    res.<span class=\"hljs-title function_\">send</span>({ \n        <span class=\"hljs-attr\">ok</span>: <span class=\"hljs-literal\">true</span>, \n        <span class=\"hljs-attr\">user</span>: {\n            <span class=\"hljs-attr\">name</span>: user.<span class=\"hljs-property\">name</span>, \n            <span class=\"hljs-attr\">email</span>: user.<span class=\"hljs-property\">email</span>\n        }\n    });\n});\n</code></pre>\n<p>Finally, we add these endpoints to <code>API.js</code></p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-attr\">webAuthn</span>: {\n    <span class=\"hljs-attr\">loginOptions</span>: <span class=\"hljs-keyword\">async</span> (email) =&gt; {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">await</span> <span class=\"hljs-variable constant_\">API</span>.<span class=\"hljs-title function_\">makePostRequest</span>(<span class=\"hljs-variable constant_\">API</span>.<span class=\"hljs-property\">endpoint</span> + <span class=\"hljs-string\">&quot;webauth-login-options&quot;</span>, { email });\n    },\n    <span class=\"hljs-attr\">loginVerification</span>: <span class=\"hljs-keyword\">async</span> (email, data) =&gt; {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">await</span> <span class=\"hljs-variable constant_\">API</span>.<span class=\"hljs-title function_\">makePostRequest</span>(<span class=\"hljs-variable constant_\">API</span>.<span class=\"hljs-property\">endpoint</span> + <span class=\"hljs-string\">&quot;webauth-login-verification&quot;</span>, {\n            email,\n            data\n        });                       \n    },\n    <span class=\"hljs-attr\">registrationOptions</span>: <span class=\"hljs-keyword\">async</span> () =&gt; {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">await</span> <span class=\"hljs-variable constant_\">API</span>.<span class=\"hljs-title function_\">makePostRequest</span>(<span class=\"hljs-variable constant_\">API</span>.<span class=\"hljs-property\">endpoint</span> + <span class=\"hljs-string\">&quot;webauth-registration-options&quot;</span>, <span class=\"hljs-title class_\">Auth</span>.<span class=\"hljs-property\">account</span>);           \n    },\n    <span class=\"hljs-attr\">registrationVerification</span>: <span class=\"hljs-keyword\">async</span> (data) =&gt; {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">await</span> <span class=\"hljs-variable constant_\">API</span>.<span class=\"hljs-title function_\">makePostRequest</span>(<span class=\"hljs-variable constant_\">API</span>.<span class=\"hljs-property\">endpoint</span> + <span class=\"hljs-string\">&quot;webauth-registration-verification&quot;</span>, {\n            <span class=\"hljs-attr\">user</span>: <span class=\"hljs-title class_\">Auth</span>.<span class=\"hljs-property\">account</span>,\n            data\n        });                       \n    }\n},\n</code></pre>\n","slug":"setting-up-endpoints","title":"Setting up Endpoints","section":"Using Webauthn","icon":"fingerprint","filePath":"/Users/firt/Library/Mobile Documents/com~apple~CloudDocs/Trainings/FEM/Authentication/fullstack-authentication/lessons/05-using-webauthn/C-setting-up-endpoints.md","nextSlug":"/authentication/lessons/using-webauthn/registering-authentication","prevSlug":"/authentication/lessons/using-webauthn/endpoints-flow"}},"__N_SSG":true}